/*
   Copyright 2013 Chaoya Li

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
/* Convention Notice!!

   All macros should be followed by semicolon except for PRJ_BEGIN and PRJ_END.

*/
#ifndef __CONFIG_HPP__
#define __CONFIG_HPP__

#define PROJECT_NAME ${PROJECT_NAME}
#define PROJECT_VERSION_MAJOR ${${PROJECT_NAME}_VERSION_MAJOR}
#define PROJECT_VERSION_MINOR ${${PROJECT_NAME}_VERSION_MINOR}
#define BUILD_DATE ${BUILD_DATE}

#define NAMESPACE PROJECT_NAME
#define PRJ_BEGIN namespace NAMESPACE {
#define PRJ_END }
#define USE_PRJ_NAMESPACE using namespace NAMESPACE

#include <stdint.h>
typedef uint64_t SizeType;
typedef int64_t  SIntType;

#ifdef DOUBLE_PRECISION
typedef double Real;
#else
typedef float Real;
#endif

#include <limits>
#include <cmath>
PRJ_BEGIN
template <typename T> inline T Zero() { return 0; }
template <typename T> inline bool isZero(const T & x)
{ return std::abs(x) < std::numeric_limits<T>::epsilon(); }
PRJ_END

/// STR(X): turns X into a string literature
/// XSTR(X): turns X into string of expansion of macro X
#define STR(X) #X
#define XSTR(X) STR(X)

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifndef NDEBUG
#define _ASSERT_(x,log,msg,...) \
  do{if(!(x)){ \
    fprintf((log),"[FAIL] " __FILE__ ":%d " STR(x) "\n",__LINE__); \
    if(strcmp((msg),"")){fprintf((log),"[FAIL] " msg "\n",##__VA_ARGS__);} \
    fflush((log)); \
    exit(EXIT_FAILURE); \
  }}while(0)
#else
#define _ASSERT_(x,log,msg,...) do{(x);}while(0)
#endif
#define ASSERT(x) _ASSERT_(x,stderr,"")
#define ASSERT_MSG(x,msg,...) _ASSERT_(x,stderr,msg,##__VA_ARGS__)

#define _MSG_(type,log,msg,...) \
  do{ \
    fprintf((log),"[" type "] " msg "\n",##__VA_ARGS__); \
    fflush((log)); \
  }while(0)
#define WARN(msg,...) _MSG_("WARN",stderr,msg,##__VA_ARGS__)
#define INFO(msg,...) _MSG_("INFO",stderr,msg,##__VA_ARGS__)

//#define LOG_REDIRECT "log.txt"
#ifdef LOG_REDIRECT
PRJ_BEGIN
static inline FILE * getLogFile() {
  static FILE * fp = fopen(LOG_REDIRECT,"a+");
  if (fp) return fp; else return stderr;
}
PRJ_END
#undef ASSERT
#undef ASSERT_MSG
#undef WARN
#undef INFO
#define ASSERT(x) do{_ASSERT_(x,NAMESPACE::getLogFile(),"");}while(0)
#define ASSERT_MSG(x,msg,...) do{_ASSERT_(x,NAMESPACE::getLogFile(),msg,##__VA_ARGS__);}while(0)
#define WARN(msg,...) do{_MSG_("WARN",NAMESPACE::getLogFile(),msg,##__VA_ARGS__);}while(0)
#define INFO(msg,...) do{_MSG_("INFO",NAMESPACE::getLogFile(),msg,##__VA_ARGS__);}while(0)
#endif

#endif //__CONFIG_HPP__
